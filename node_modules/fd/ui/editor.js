var h = require('fd/html')
var Vec2 = require('fd/vec2')
var Rect = require('fd/rect')
var Matrix = require('fd/matrix')
var emitter = require('fd/emitter')
var commands = require('fd/commands')
var mapValues = require('fd/map-values')
var M = require('fd/model')

var Panel = require('fd/ui/panel')
var Canvas = require('fd/ui/canvas')
var Inspector = require('fd/ui/inspector')
var CommandOverlay = require('fd/ui/command-overlay')
var MarkingMenu = require('fd/ui/marking-menu')

var PUSH_SIZE = 10

function Editor() {
  this.tree = new Panel(215, h('.tree panel', [
    h('.panel-header'),
    h('.panel-content'),
    h('.panel-footer'),
  ]))

  this._selection = null
  this._document = new M.Document([
    new M.Ellipse({
      fills: [{style: '#aaf'}],
      strokes: [{style: '#000', width: 1}],
      center: new Vec2(0, 0),
      radii: new Vec2(120, 90),
      transform: Matrix.skewX(Math.PI / 4).translate(300, -100),
    })
  ])
  ;[0, 1].forEach(function(angle) {
    var g = new M.Group()
    for (var i = 0; i < 20; i++) {
      g = new M.Group({
        transform: Matrix.rotate(angle * Math.PI / 24),
      }, [g, new M.Rectangle({
        fills: [{style: '#faa'}],
        strokes: [{style: '#000', width: 1}],
        bounds: new Rect(-i * 12, -i * 7, 60, 40),
      }), new M.Rectangle({
        fills: [{style: '#faa'}],
        strokes: [{style: '#000', width: 1}],
        bounds: new Rect(i * 7, i * 12, 60, 40),
      })])
    }
    g.transform = g.transform.translate(angle * 800, 0)
    g.prependTo(this.document)
  }, this)

  this.canvas = new Canvas(this)
  this.inspector = new Inspector(this)
  this.commandOverlay = new CommandOverlay(this)
  this.markingMenu = new MarkingMenu(this)

  this.el = h('.editor', [
    this.tree.el,
    this.canvas.el,
    this.inspector.el,
    this.commandOverlay.el,
    this.markingMenu.el,
  ])

  commands.add({
    selectParent: {
      title: 'Select Parent Object',
      fn: this.selectParent,
    },
    selectNext: {
      title: 'Select Next Object',
      fn: this.selectNext,
    },
    selectPrevious: {
      title: 'Select Previous Object',
      fn: this.selectPrevious,
    },
    enter: {
      title: function() {
        var s = this.selection
        return s && s.isShape ? 'Edit Path' : 'Select Child Object'
      },
      fn: this.enter,
    },
    deselectAll: {
      title: 'Deselect All',
      fn: this.deselectAll,
    },
    group: {
      title: 'Group',
      validate: false,
    },
    ungroup: {
      title: 'Ungroup',
      validate: function() {
        var s = this.selection
        return s && s.children.length
      },
      fn: this.ungroup,
    },
  }, this)
  commands.add(mapValues({
    delete: {
      title: 'Delete Object',
      fn: this.delete,
    },
    nudgeLeft: {
      title: 'Nudge Left',
      fn: this.nudge.bind(this, Vec2.left),
    },
    nudgeRight: {
      title: 'Nudge Right',
      fn: this.nudge.bind(this, Vec2.right),
    },
    nudgeUp: {
      title: 'Nudge Up',
      fn: this.nudge.bind(this, Vec2.up),
    },
    nudgeDown: {
      title: 'Nudge Down',
      fn: this.nudge.bind(this, Vec2.down),
    },
    pushLeft: {
      title: 'Nudge Left (more)',
      fn: this.nudge.bind(this, Vec2.left.scale(PUSH_SIZE)),
    },
    pushRight: {
      title: 'Nudge Right (more)',
      fn: this.nudge.bind(this, Vec2.right.scale(PUSH_SIZE)),
    },
    pushUp: {
      title: 'Nudge Up (more)',
      fn: this.nudge.bind(this, Vec2.up.scale(PUSH_SIZE)),
    },
    pushDown: {
      title: 'Nudge Down (more)',
      fn: this.nudge.bind(this, Vec2.down.scale(PUSH_SIZE)),
    },
    growLeft: {
      title: 'Grow Left',
      fn: this.grow.bind(this, Vec2.left),
    },
    growRight: {
      title: 'Grow Right',
      fn: this.grow.bind(this, Vec2.right),
    },
    growUp: {
      title: 'Grow Up',
      fn: this.grow.bind(this, Vec2.up),
    },
    growDown: {
      title: 'Grow Down',
      fn: this.grow.bind(this, Vec2.down),
    },
    expandLeft: {
      title: 'Grow Left (more)',
      fn: this.grow.bind(this, Vec2.left.scale(PUSH_SIZE)),
    },
    expandRight: {
      title: 'Grow Right (more)',
      fn: this.grow.bind(this, Vec2.right.scale(PUSH_SIZE)),
    },
    expandUp: {
      title: 'Grow Up (more)',
      fn: this.grow.bind(this, Vec2.up.scale(PUSH_SIZE)),
    },
    expandDown: {
      title: 'Grow Down (more)',
      fn: this.grow.bind(this, Vec2.down.scale(PUSH_SIZE)),
    },
    toggleHidden: {
      title: function() {
        var s = this.selection
        return s && s.hidden ? 'Show Object' : 'Hide Object'
      },
      fn: this.toggleHidden,
    },
  }, function(v) {
    v.validate = this.hasSelection
    return v
  }, this), this)
}

emitter(Editor.prototype)
emitter.property(Editor.prototype, 'selection')
emitter.property(Editor.prototype, 'document')

Editor.prototype.hasSelection = function() {
  return !!this.selection
}

Editor.prototype.selectParent = function() {
  var s = this.selection
  this.selection = s && s.parent && s.parent.parent ? s.parent : null
}
Editor.prototype.selectNext = function() {
  var s = this.selection
  this.selection = s ? s.next || s.parent && s.parent.first || s : this.document.first
}
Editor.prototype.selectPrevious = function(s) {
  var s = this.selection
  this.selection = s ? s.previous || s.parent && s.parent.last || s : this.document.last
}
Editor.prototype.enter = function() {
  var s = this.selection
  this.selection = s ? s.first || s : this.document.first
}
Editor.prototype.deselectAll = function() {
  this.selection = null
}

Editor.prototype.ungroup = function() {
  var s = this.selection
  if (!s) return
  var children = s.children.slice()
  s.parent.replaceWithAll(s, children)
  this.selection = children[0] // TODO select all
}

Editor.prototype.nudge = function(delta) {
  var s = this.selection
  if (!s) return true

  s.boundingBox = s.boundingBox.translate(delta.transform(s.globalToLocal.withoutTranslation))
  this.emit('selectionBoundsChange')
}

Editor.prototype.grow = function(delta) {
  var s = this.selection
  if (!s) return true

  delta = delta.transform(s.globalToLocal.withoutTranslation)
  var bb = s.boundingBox
  s.boundingBox = new Rect(bb.x, bb.y, Math.max(0, bb.width + delta.x), Math.max(0, bb.height + delta.y))
  this.emit('selectionBoundsChange')
}

Editor.prototype.toggleHidden = function(s) {
  var s = this.selection
  if (!s) return true

  s.hidden = !s.hidden
  this.emit('selectionBoundsChange')
}

Editor.prototype.delete = function(s) {
  var s = this.selection
  if (!s) return true

  s.detach()
  this.selection = null
}

Editor.prototype.start = function() {
  document.body.appendChild(this.el)
  addEventListener('resize', this.onResize.bind(this))
  this.tree.on('resize', this.onResize, this)
  this.onResize()
  this.canvas.center = new Vec2(30, -20)
  this.canvas.scale = 1.5
  this.canvas.onResize()
  return this
}

Editor.prototype.onResize = function() {
  this.canvas.onResize()
}

Editor.prototype.getData = function(type) {
  throw new Error('Unimplemented')
}

Editor.prototype.loadData = function(type, data) {
  return // TODO implement M.load
  if (type !== 'public.svg-image') throw new Error('Unimplemented')
  var document = new DOMParser().parseFromString(data, 'image/svg+xml')
  this.canvas.setDocument(M.load(document))
}

module.exports = Editor
