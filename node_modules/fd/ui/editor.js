var h = require('fd/html')
var Vec2 = require('fd/vec2')
var Rect = require('fd/rect')
var emitter = require('fd/emitter')
var commands = require('fd/commands')
var M = require('fd/model')

var Panel = require('fd/ui/panel')
var Canvas = require('fd/ui/canvas')
var Inspector = require('fd/ui/inspector')

var PUSH_SIZE = 10

function Editor() {
  this.layers = new Panel(215, h('.layers panel', [
    h('.panel-header'),
    h('.panel-content'),
    h('.panel-footer')
  ]))

  this.canvas = new Canvas(this)
  this.inspector = new Inspector(this)

  this._selection = null

  this.el = h('.editor', [
    this.layers.el,
    this.canvas.el,
    this.inspector.el
  ])

  commands.on('selectParent', this.selectParent, this)
  commands.on('enter', this.enter, this)
  commands.on('delete', this.delete, this)
  commands.on('nudgeLeft', this.nudge.bind(this, Vec2.left))
  commands.on('nudgeRight', this.nudge.bind(this, Vec2.right))
  commands.on('nudgeUp', this.nudge.bind(this, Vec2.up))
  commands.on('nudgeDown', this.nudge.bind(this, Vec2.down))
  commands.on('pushLeft', this.nudge.bind(this, Vec2.left.scale(PUSH_SIZE)))
  commands.on('pushRight', this.nudge.bind(this, Vec2.right.scale(PUSH_SIZE)))
  commands.on('pushUp', this.nudge.bind(this, Vec2.up.scale(PUSH_SIZE)))
  commands.on('pushDown', this.nudge.bind(this, Vec2.down.scale(PUSH_SIZE)))
  commands.on('growLeft', this.grow.bind(this, Vec2.left))
  commands.on('growRight', this.grow.bind(this, Vec2.right))
  commands.on('growUp', this.grow.bind(this, Vec2.up))
  commands.on('growDown', this.grow.bind(this, Vec2.down))
  commands.on('expandLeft', this.grow.bind(this, Vec2.left.scale(PUSH_SIZE)))
  commands.on('expandRight', this.grow.bind(this, Vec2.right.scale(PUSH_SIZE)))
  commands.on('expandUp', this.grow.bind(this, Vec2.up.scale(PUSH_SIZE)))
  commands.on('expandDown', this.grow.bind(this, Vec2.down.scale(PUSH_SIZE)))
  commands.on('toggleHidden', this.toggleHidden, this)
}

emitter(Editor.prototype)
emitter.property(Editor.prototype, 'selection')

function actOnSelection(fn) {
  return function() {
    var s = this.selection
    return s ? fn.call(this, s) : true
  }
}

Editor.prototype.selectParent = actOnSelection(function(s) {
  this.selection = s.parent && s.parent.parent ? s.parent : null
})

Editor.prototype.enter = actOnSelection(function(s) {
  if (s && s.children.length) this.selection = s.children[0]
})

Editor.prototype.nudge = function(delta) {
  var s = this.selection
  if (!s) return true
  s.boundingBox = s.boundingBox.translate(delta.transform(s.globalToLocal.withoutTranslation))
  this.emit('selectionBoundsChange')
}

Editor.prototype.grow = function(delta) {
  var s = this.selection
  if (!s) return true
  delta = delta.transform(s.globalToLocal.withoutTranslation)
  var bb = s.boundingBox
  s.boundingBox = new Rect(bb.x, bb.y, Math.max(0, bb.width + delta.x), Math.max(0, bb.height + delta.y))
  this.emit('selectionBoundsChange')
}

Editor.prototype.toggleHidden = actOnSelection(function(s) {
  s.hidden = !s.hidden
  this.emit('selectionBoundsChange')
})

Editor.prototype.delete = actOnSelection(function(s) {
  s.detach()
  this.selection = null
})

Editor.prototype.start = function() {
  document.body.appendChild(this.el)
  addEventListener('resize', this.onResize.bind(this))
  this.layers.on('resize', this.onResize, this)
  this.onResize()
  this.canvas.center = new Vec2(30, -20)
  this.canvas.scale = 1.5
  this.canvas.onResize()
  return this
}

Editor.prototype.onResize = function() {
  this.canvas.onResize()
}

Editor.prototype.getData = function(type) {
  throw new Error('Unimplemented')
}

Editor.prototype.loadData = function(type, data) {
  return // TODO implement M.load
  if (type !== 'public.svg-image') throw new Error('Unimplemented')
  var document = new DOMParser().parseFromString(data, 'image/svg+xml')
  this.canvas.setDocument(M.load(document))
}

module.exports = Editor
