var h = require('fd/html')
var Native = require('native')
var commands = require('fd/commands')
var commandList = require('fd/command-list')
var keyBindings = require('fd/key-bindings')
var displayBinding = require('fd/display-binding')

function CommandOverlay(editor) {
  this.editor = editor
  this._visible = false

  this.el = h('.command-overlay', [
    this.input = h('input', {placeholder: 'Type a commandâ€¦'}),
    this.list = h('ul.command-list')
  ])

  this.input.addEventListener('blur', this.onBlur.bind(this))
  this.input.addEventListener('keydown', this.onKeyDown.bind(this))
  this.input.addEventListener('input', this.update.bind(this))
  this.list.addEventListener('click', this.onListClick.bind(this))
  commands.add('showCommands', {
    title: 'Show Commands',
    fn: this.show
  }, this)
}

CommandOverlay.prototype.onBlur = function() {
  // this.hide()
}

CommandOverlay.prototype.onKeyDown = function(e) {
  if (e.keyIdentifier === 'U+001B') {
    this.hide()
  } else if (e.keyIdentifier === 'Enter') {
    this.accept()
  } else if (e.keyIdentifier === 'U+0020' && this.input.selectionStart === 0) {
  } else {
    return
  }
  e.preventDefault()
}

CommandOverlay.prototype.onListClick = function(e) {
  var t = e.target
  while (t.tagName !== 'LI') {
    if (t.tagName === 'UL') return
    t = t.parentNode
    if (!t) return
  }
  if (t.dataset.name) {
    if (t.classList.contains('enabled')) {
      Native.hooks.runCommand(t.dataset.name)
      var ancestors = []
      while (t) {
        if (t.tagName === 'LI') ancestors.push(t)
        t = t.parentNode
      }
      ;[].forEach.call(this.hierarchy.querySelectorAll('.expanded'), function(li) {
        if (ancestors.indexOf(li) === -1) li.classList.remove('expanded')
      })
      this.hide()
    }
    return
  }
  t.classList.toggle('expanded')
  this.input.focus()
}

CommandOverlay.prototype.accept = function() {
  this.hide()
}

CommandOverlay.prototype.show = function() {
  this.visible = true
}
CommandOverlay.prototype.hide = function() {
  this.visible = false
}

Object.defineProperty(CommandOverlay.prototype, 'visible', {
  get: function() {return this._visible},
  set: function(value) {
    this.el.classList.toggle('show', this._visible = value)
    if (value) {
      this.update()
      this.input.select()
    }
  }
})

var bindingFor = function(map) {
  for (var binding in keyBindings) {
    var name = keyBindings[binding]
    if (!map[name]) map[name] = binding
  }
  return map
}(Object.create(null))

CommandOverlay.prototype.update = function() {
  var q = this.input.value
  while (this.list.firstChild) this.list.removeChild(this.list.lastChild)

  if (q) {
    var list = commandList.commands.map(function(it) {
      return {score: this.scoreItem(it, q), item: it}
    }, this).filter(function(it) {
      return it.score >= 0
    })
    list.sort(function(a, b) {
      return a.score - b.score
    })
    list.forEach(this.addScoredItem, this)
  } else {
    if (!this.hierarchy) {
      this.hierarchy = this.createHierarchy(commandList.hierarchy)
    } else {
      this.validateHierarchy()
    }
    this.list.appendChild(this.hierarchy)
  }
}

CommandOverlay.prototype.scoreItem = function(it, q) {
  var c = commands.get(it.name)
  return c.title.toLowerCase().indexOf(q.toLowerCase())
}

CommandOverlay.prototype.createHierarchy = function(items) {
  return h('ul', items.map(function(it) {
    switch (it.kind) {
      case 'group':
        return h('li.group', [
          h('.title', [it.title]),
          this.createHierarchy(it.items),
        ])
      case 'separator':
        return h('li.separator')
      case 'command':
        var binding = bindingFor[it.name]
        var c = commands.get(it.name)
        if (!c) c = {title: it.name}
        return h('li.command', {dataset: {name: it.name}}, [
          h('.title', [
            c.title,
            h('.binding', [binding ? displayBinding(binding) : '']),
          ]),
        ])
    }
  }, this))
}

CommandOverlay.prototype.validateHierarchy = function() {
  ;[].forEach.call(this.hierarchy.querySelectorAll('[data-name]'), function(it) {
    var c = commands.get(it.dataset.name)
    it.classList.toggle('enabled', !!c.enabled)
  })
}

CommandOverlay.prototype.addScoredItem = function(o) {
  var it = o.item
  if (!it.name) return // TODO
  var binding = bindingFor[it.name]
  var c = commands.get(it.name)
  this.list.appendChild(h('li.command' + (c.enabled ? ' enabled' : ''), {
    dataset: {name: it.name}
  }, [
    h('.title', [
      h('span.path', it.path.map(function(name) {
        return h('span.path-item', [name])
      })),
      c.title,
      h('.binding', [binding ? displayBinding(binding) : '']),
    ]),
  ]))
}

module.exports = CommandOverlay
