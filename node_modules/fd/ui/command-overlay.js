var h = require('fd/html')
var commands = require('fd/commands')
var commandList = require('fd/command-list')
var keyBindings = require('fd/key-bindings')
var displayBinding = require('fd/display-binding')

function CommandOverlay(editor) {
  this.editor = editor
  this._visible = false

  this.el = h('.command-overlay', [
    this.input = h('input', {placeholder: 'Type a commandâ€¦'}),
    this.list = h('ul.command-list')
  ])

  this.expanded = Object.create(null)

  this.input.addEventListener('blur', this.onBlur.bind(this))
  this.input.addEventListener('keydown', this.onKeyDown.bind(this))
  this.input.addEventListener('input', this.update.bind(this))
  this.list.addEventListener('click', this.onListMouseDown.bind(this))
  commands.add('showCommands', {
    title: 'Show Commands',
    fn: this.show
  }, this)
}

CommandOverlay.prototype.onBlur = function() {
  // this.hide()
}

CommandOverlay.prototype.onKeyDown = function(e) {
  if (e.keyIdentifier === 'U+001B') {
    this.hide()
  } else if (e.keyIdentifier === 'Enter') {
    this.accept()
  } else if (e.keyIdentifier === 'U+0020' && this.input.selectionStart === 0) {
  } else {
    return
  }
  e.preventDefault()
}

CommandOverlay.prototype.onListMouseDown = function(e) {
  var t = e.target
  while (t.tagName !== 'LI') {
    if (t.matches('.path')) var onPath = true
    t = t.parentNode
    if (!t) return
  }
  var path = t.dataset.path.split('\n')
  if (onPath || !t.dataset.name) {
    this.expand(path)

  }
  this.update()
}

CommandOverlay.prototype.accept = function() {
  this.hide()
}

CommandOverlay.prototype.show = function() {
  this.visible = true
}
CommandOverlay.prototype.hide = function() {
  this.visible = false
}

Object.defineProperty(CommandOverlay.prototype, 'visible', {
  get: function() {return this._visible},
  set: function(value) {
    this.el.classList.toggle('show', this._visible = value)
    if (value) {
      this.update()
      this.input.select()
    }
  }
})

var bindingFor = function(map) {
  for (var binding in keyBindings) {
    var name = keyBindings[binding]
    if (!map[name]) map[name] = binding
  }
  return map
}(Object.create(null))

CommandOverlay.prototype.update = function() {
  var q = this.input.value
  while (this.list.firstChild) this.list.removeChild(this.list.lastChild)

  if (q) {

  } else {
    commandList.hierarchy.forEach(function process(item, i) {
      if (item.kind === 'group' && this.isExpanded(item.path.concat(item.title))) {
        item.items.forEach(process, this)
        return
      }
      this.addItem(item, i === 0)
    }, this)
  }
}

CommandOverlay.prototype.expand = function(path) {
  var e = this.expanded
  for (var i = 0, l = path.length; i < l; i++) {
    var o = e[path[i]]
    if (!o) o = e[path[i]] = {
      map: Object.create(null),
      expanded: false,
    }
    e = o.map
  }
  o.expanded = !o.expanded
}

CommandOverlay.prototype.isExpanded = function(path) {
  var e = this.expanded
  for (var i = 0, l = path.length; i < l; i++) {
    var o = e[path[i]]
    if (!o) return false
    e = o.map
  }
  return !!o.expanded
}

CommandOverlay.prototype.addItem = function(item, highlight) {
  if (item.kind === 'separator') {
    this.list.appendChild(h('li.separator'))
    return
  }
  if (item.name) {
    var binding = bindingFor[item.name]
    var c = commands.get(item.name)
    if (!c) c = {title: item.name}
  }
  var isCommand = item.kind === 'command'
  var path = item.path.concat(isCommand ? [] : item.title)
  this.list.appendChild(h('li' + (isCommand ? '' : '.group'), {
    dataset: {path: path.join('\n'), name: item.name || ''}
  }, [
    h('span.path', path.map(function(name, i) {
      return h('span' + (i >= path.length - (isCommand || !highlight ? 1 : 2) && (highlight || !isCommand) ? '.highlight' : ''), [name])
    }))
  ].concat(isCommand ? [
    h('span.title', [
      c.title, h('span.shortcut', [binding ? displayBinding(binding) : ''])
    ]),
  ] : [])))
}

module.exports = CommandOverlay
