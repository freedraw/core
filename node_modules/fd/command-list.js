var extend = require('fd/extend')
var ___ = {}

var info = [
  ['Freedraw', [
    'about',
    ___,
    'preferences',
    'sendFeedback',
    'connectToMirror',
    ___,
    'hideApp',
    'hideOtherApps',
    'showAllApps',
    ___,
    'quit',
  ]],
  ['File', [
    'new',
    ['New From Template', [
      {list: 'newFileTemplates'},
    ]],
    'open',
    ['Open Recent', [
      {list: 'recentFiles'},
      ___,
      'clearRecentFiles',
    ]],
    ___,
    'close',
    'save',
    'duplicateFile',
    'renameFile',
    'moveFile',
    ['Revert To', [
      {list: 'fileVersions'},
      ___,
      'browseFileVersions',
    ]],
    ___,
    'export',
    ___,
    'saveAsTemplate',
    ___,
    'pageSetup',
    'print',
  ]],
  ['Edit', [
    'undo',
    'redo',
    ___,
    'cut',
    'copy',
    'paste',
    'pasteInPlace',
    'pasteAndMatchStyle',
    'duplicate',
    'delete',
    ___,
    'selectAll',
    'deselectAll',
    ___,
    'copyStyle',
    'pasteStyle',
    'setDefaultStyle',
    ___,
    'pickColor',
    'copyCSS',
    ___,
    ['Spelling', [
      'showSpellingAndGrammar',
      'checkSpelling',
      'toggleSpelling',
    ]],
    ___,
    'startDictation',
    'showEmojiAndSymbols',
  ]],
  ['Insert', [
    'insertCurve',
    'insertPencil',
    ['Shape', [
      'insertLine',
      'insertArrow',
      ___,
      'insertEllipse',
      'insertRectangle',
      'insertRounded',
      ___,
      'insertStar',
      'insertPolygon',
      'insertTriangle',
    ]],
    ___,
    'insertText',
    'insertImage',
    ___,
    'insertSlice',
    ___,
    ['Symbols', [{list: 'symbols'}]],
    ['Styled Text', [{list: 'textStyles'}]],
  ]],
  ['Object', [
    'createSymbol',
    'createStyle',
    ___,
    'scaleObject',
    'fitToPixelGrid',
    ___,
    ['Style', [
      'addFill',
      'addStroke',
      'addShadow',
      'addInnerShadow',
      ___,
      'showFillOptions',
      'showStrokeOptions',
      ___,
      'removeUnusedStyles',
    ]],
    ['Combine', [
      {name: 'setPathMode', args: ['union']},
      {name: 'setPathMode', args: ['subtract']},
      {name: 'setPathMode', args: ['intersect']},
      {name: 'setPathMode', args: ['difference']},
      ___,
      {name: 'setPathMode', args: ['none']},
    ]],
    ['Transform', [
      'transform',
      'rotate',
      ___,
      'flipHorizontal',
      'flipVertical',
    ]],
    ['Adjust', [
      'nudgeLeft',
      'nudgeRight',
      'nudgeUp',
      'nudgeDown',
      ___,
      'pushLeft',
      'pushRight',
      'pushUp',
      'pushDown',
      ___,
      'growLeft',
      'growRight',
      'growUp',
      'growDown',
      ___,
      'expandLeft',
      'expandRight',
      'expandUp',
      'expandDown',
    ]],
    ['Path', [
      'joinPaths',
      'splitPaths',
      'flattenPaths',
      ___,
      'closePath',
      'reverse',
      ___,
      'vectorizeStroke',
      'pathScissors',
      'rotateCopies',
    ]],
    ['Image', [
      'replaceImage',
      'resetImageSize',
      'convertTo9Slice',
      ___,
      'reduceImageSize',
    ]],
    ___,
    'flattenObject',
    'flattenToBitmap',
    ___,
    'setMask',
    ['Mask Mode', [
      {name: 'setMaskMode', args: 'outline'},
      {name: 'setMaskMode', args: 'alpha'},
    ]],
    'ignoreMask',
    'maskWithSelectedShape',
  ]],
  ['Text', [
    'textBold',
    'textItalic',
    'textUnderline',
    ___,
    'textBigger',
    'textSmaller',
    ___,
    'textLowercase',
    'textUppercase',
    ___,
    'showFonts',
    'selectSimilarText',
    ___,
    'convertTextToOutline',
    'textOnPath',
    ___,
    ['Kern', [
      'kernDefault',
      'kernNone',
      'kernTighten',
      'kernLoosen',
    ]],
    ['Ligature', [
      'ligatureDefault',
      'ligatureNone',
      'ligatureAll',
    ]],
    ['Baseline', [
      'baselineDefault',
      'baselineSuperscript',
      'baselineSubscript',
      'baselineRaise',
      'baselineLower',
    ]],
    ___,
    'alignLeft',
    'alignCenter',
    'alignJustify',
    'alignRight',
  ]],
  ['Arrange', [
    'bringForward',
    'bringToFront',
    'sendBackward',
    'sendToBack',
    ___,
    ['Align Objects', [
      'alignLeft',
      'alignHorizontal',
      'alignRight',
      ___,
      'alignTop',
      'alignVertical',
      'alignBottom',
    ]],
    ['Distribute Objects', [
      'distributeHorizontal',
      'distributeVertical',
    ]],
    'makeGrid',
    ___,
    'toggleHidden',
    'toggleLocked',
    'rename',
    ___,
    'group',
    'ungroup',
  ]],
  ['Developer', [
    'showConsole',
    'revealPluginsFolder',
  ]],
  ['View', [
    'zoomIn',
    'zoomOut',
    ___,
    'zoom0',
    'zoomCenter',
    'zoomSelection',
    'centerSelection',
    ___,
    'toggleOutline',
    'toggleInspector',
    'toggleBoth',
    'togglePresentationMode',
    ___,
    ['Outline', [
      'toggleAutoExpandOutline',
      'collapseOutline',
      ___,
      'revealInOutline',
      'filterOutline',
    ]],
    ['Canvas', [
      'toggleSmartGuides',
      'toggleSelectionHandles',
      'toggleObjectHighlight',
      ___,
      'toggleRulers',
      'togglePixels',
      'togglePixelGrid',
      ___,
      'toggleGrid',
      'toggleLayout',
      'hideAllLayout',
      ___,
      'showGridSettings',
      'showLayoutSettings',
    ]],
    ___,
    'toggleToolbar',
    'customizeToolbar',
    ___,
    'toggleFullScreen',
  ]],
]

exports.commands = []
exports.hierarchy = info.map(function process(path, item) {
  var result =
    item === ___ ? {kind: 'separator'} :
    typeof item === 'string' ?
      {kind: 'command', name: item} :
    Array.isArray(item) ?
      {kind: 'group', title: item[0], items: item[1].map(process.bind(null, path.concat(item[0])))} :
      extend(item, {kind: item.list ? 'list' : 'command'})

  if (!result.kind) result.kind = 'command'
  if (result.kind === 'command') exports.commands.push(result)
  result.path = path
  return result
}.bind(null, []))
