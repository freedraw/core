var Native = require('native')
var emitter = require('fd/emitter')

// emitter(exports)

exports.add = function(name, config, context) {
  if (typeof name === 'object') {
    for (var key in name) {
      this.add(key, name[key], config)
    }
    return this
  }
  if (typeof config === 'function') config = {fn: config}
  config.name = name
  config.context = context
  if (this.commands[name]) console.warn('Redefinition of command: ' + name)
  this.commands[name] = config
  return this
}

exports.run = function(name, args) {
  var c = this.commands[name]
  if (!c) {
    console.warn('Unimplemented command: ' + name)
    return false
  }
  if (c.validate && !c.validate.apply(c.context, args)) {
    return false
  }
  c.fn.apply(c.context, args)
  return true
}

exports.get = function(name, args) {
  var c = this.commands[name]
  if (!c) return null
  return {
    title: typeof c.title === 'function' ? c.title.apply(c.context, args) : c.title,
    enabled: c.validate && c.validate.apply(c.context, args),
    config: c
  }
}

exports.each = function(fn, context) {
  for (var name in this.commands) {
    fn.call(context, this.get(name))
  }
}

exports.commands = Object.create(null)

Native.hooks.runCommand = exports.run.bind(exports)
